[{"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\index.js":"1","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\reportWebVitals.js":"2","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\App.js":"3","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\home.jsx":"4","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\disease.jsx":"5","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\hospital.jsx":"6","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\util\\apiCalls.js":"7","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Header.jsx":"8","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addDisease.jsx":"9","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editDisease.jsx":"10","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addHospital.jsx":"11","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editHospital.jsx":"12","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\viewHospital.jsx":"13","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Login.jsx":"14","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Register.jsx":"15","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editPatient.jsx":"16","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addPatient.jsx":"17"},{"size":449,"mtime":1659074563401,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1659074563420,"results":"20","hashOfConfig":"19"},{"size":614,"mtime":1659074563361,"results":"21","hashOfConfig":"19"},{"size":6818,"mtime":1659598538498,"results":"22","hashOfConfig":"19"},{"size":9599,"mtime":1659074563722,"results":"23","hashOfConfig":"19"},{"size":18957,"mtime":1659074563782,"results":"24","hashOfConfig":"19"},{"size":8262,"mtime":1659598158696,"results":"25","hashOfConfig":"19"},{"size":10986,"mtime":1659598542606,"results":"26","hashOfConfig":"19"},{"size":4678,"mtime":1659074563692,"results":"27","hashOfConfig":"19"},{"size":4993,"mtime":1659074563731,"results":"28","hashOfConfig":"19"},{"size":15152,"mtime":1659074924833,"results":"29","hashOfConfig":"19"},{"size":6225,"mtime":1659074563741,"results":"30","hashOfConfig":"19"},{"size":14355,"mtime":1659074563812,"results":"31","hashOfConfig":"19"},{"size":6924,"mtime":1659074563793,"results":"32","hashOfConfig":"19"},{"size":7665,"mtime":1659074563802,"results":"33","hashOfConfig":"19"},{"size":4742,"mtime":1659074563750,"results":"34","hashOfConfig":"19"},{"size":10966,"mtime":1659074563713,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ccgwen",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\index.js",[],["79","80"],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\reportWebVitals.js",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\App.js",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\home.jsx",["81","82","83","84","85","86","87","88"],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\disease.jsx",["89","90"],"import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\r\nimport { Grid, Snackbar } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport '../App.css';\r\nimport { deleteDiseases, getAllDiseases } from '../util/apiCalls';\r\nimport AddDisease from './addDisease';\r\nimport EditDisease from './editDisease';\r\nimport Header from './Header';\r\nexport default function Disease() {\r\n  const [value, setValue] = React.useState(1);\r\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\r\n  const [isAddDiseaseOpen, setIsAddDiseaseOpen] = React.useState(false);\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [isEditDiseaseOpen, setIsEditDiseaseOpen] = React.useState(false);\r\n\r\n  const [eDiseaseId, seteDiseaseId] = React.useState('');\r\n  const [eVirusName, seteVirusName] = React.useState('');\r\n  const [eDiseaseName, seteDiseaseName] = React.useState('');\r\n  const [eVarientName, seteVarientName] = React.useState('');\r\n\r\n\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const [diseaseList, setDiseaseList] = React.useState([]);\r\n  const loginHandler = (value) => {\r\n    setIsLoggedIn(value);\r\n  }\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    getLoggedInStatus();\r\n  }, [value]);\r\n\r\n  const editDisease = (id, pos) => {\r\n    seteDiseaseId(id);\r\n    seteDiseaseName(diseaseList[pos].diseaseName);\r\n    seteVarientName(diseaseList[pos].variant);\r\n    seteVirusName(diseaseList[pos].virusName);\r\n    toggleEditDiseaseModal();\r\n  }\r\n\r\n  const deleteDisease = (id) => {\r\n    console.log(id);\r\n    deleteDiseases(id).then(resp => {\r\n      if (resp.status === 500) {\r\n        setSnackMessage('Error occured during delete disease');\r\n        setOpenSnack(true);\r\n      } else {\r\n        console.log(resp);\r\n        setSnackMessage('Disease deleted successfully');\r\n        setOpenSnack(true);\r\n        getAllDiseases().then(resp => {\r\n          console.log(resp);\r\n          let data = resp.data;\r\n          console.log(data);\r\n          setDiseaseList(data);\r\n        }).catch(error => {\r\n          setOpenSnack(true);\r\n          setSnackMessage(error.response.data.message);\r\n          \r\n          console.log(\"login user err \" + error);\r\n        });\r\n      }\r\n\r\n    }).catch(error => {\r\n      setOpenSnack(true);\r\n          setSnackMessage(\"Deletion failed: \"+error.response.data.message);\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getAllDiseases().then(resp => {\r\n      console.log(resp);\r\n      let data = resp.data;\r\n      console.log(data);\r\n      setDiseaseList(data);\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n\r\n  }, []);\r\n\r\n  function getLoggedInStatus() {\r\n    if (localStorage.getItem(\"name\") !== \"\" && localStorage.getItem(\"name\") !== undefined\r\n      && localStorage.getItem(\"name\") !== null) {\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setIsLoggedIn(false);\r\n    }\r\n  }\r\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '700px !important',\r\n      height: '380px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n  const BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n\r\n          >\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };\r\n\r\n\r\n  BootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n  function toggleEditDiseaseModal() {\r\n    setIsEditDiseaseOpen(!isEditDiseaseOpen);\r\n    if (isEditDiseaseOpen === true) {\r\n      getAllDiseases().then(resp => {\r\n        console.log(resp);\r\n        let data = resp.data;\r\n        console.log(data);\r\n        setDiseaseList(data);\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n    }\r\n  }\r\n  const columns = [\r\n    { id: 'diseaseName', label: 'Disease Name', minWidth: 100 },\r\n    { id: 'variant', label: 'Variant', minWidth: 70 },\r\n    { id: 'virusName', label: 'Virus Name', minWidth: 70 },\r\n    { id: 'id', label: 'ACTION', minWidth: 100 },\r\n  ];\r\n\r\n  function toggleAddDiseaseModal() {\r\n    setIsAddDiseaseOpen(!isAddDiseaseOpen);\r\n    if (isAddDiseaseOpen === true) {\r\n      getAllDiseases().then(resp => {\r\n        console.log(resp);\r\n        let data = resp.data;\r\n        console.log(data);\r\n        setDiseaseList(data);\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header loginHandler={loginHandler} />\r\n      <br></br><br></br><br></br><br></br><br></br>\r\n\r\n      <Grid container direction=\"row\" style={{ padding: '10px' }}>\r\n        <Grid item xs={1}></Grid>\r\n        <Grid item xs={10}>\r\n          <Button variant=\"contained\" style={{ backgroundColor: \"darkkhaki\", float: 'right' }} onClick={toggleAddDiseaseModal}><AddCircleOutlineIcon />&nbsp;ADD DISEASE</Button>\r\n          <br></br><br></br>\r\n          <TableContainer component={Paper}>\r\n            <Table stickyHeader aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {\r\n                    columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth, fontWeight: '700', backgroundColor: 'rgb(38, 38, 115)', color: 'white' }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))\r\n                  }\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {diseaseList.map((row, index) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n\r\n                            {(column.id === 'id') ? (\r\n                              <>\r\n                                <IconButton aria-label=\"edit\" onClick={(e) => editDisease(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                  <ModeEditIcon />\r\n                                </IconButton>\r\n                                <IconButton style={{ color: 'red' }} onClick={(e) => deleteDisease(value)} aria-label=\"delete\" size=\"large\">\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </>\r\n                            ) : value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n        <Grid item xs={1}></Grid>\r\n      </Grid>\r\n\r\n      <BootstrapDialog\r\n        onClose={toggleAddDiseaseModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isAddDiseaseOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          ADD DISEASE\r\n        </BootstrapDialogTitle>\r\n\r\n        <AddDisease addDiseaseModal={toggleAddDiseaseModal} />\r\n\r\n      </BootstrapDialog>\r\n      <BootstrapDialog\r\n        onClose={toggleEditDiseaseModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isEditDiseaseOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          EDIT DISEASE\r\n        </BootstrapDialogTitle>\r\n\r\n        <EditDisease editDiseaseModal={toggleEditDiseaseModal}\r\n          diseaseId={eDiseaseId}\r\n          diseaseNameFromDb={eDiseaseName}\r\n          virusNameFromDb={eVirusName} varientNameFromDb={eVarientName} />\r\n\r\n\r\n      </BootstrapDialog>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\hospital.jsx",["91","92","93","94","95","96"],"import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport AppsIcon from '@mui/icons-material/Apps';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\r\nimport MedicationIcon from '@mui/icons-material/Medication';\r\nimport ForwardIcon from '@mui/icons-material/Forward';\r\nimport { FormControl, Grid, InputLabel, MenuItem, Snackbar, Select, Input, Typography } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport '../App.css';\r\nimport { deleteHospitals, getAllDiseases, getAllHospitals, searchHospitals } from '../util/apiCalls';\r\nimport AddHospital from './addHospital';\r\nimport EditHospital from './editHospital';\r\nimport Header from './Header';\r\nimport ViewHospital from './viewHospital';\r\nexport default function Hospital() {\r\n  const [value, setValue] = React.useState(1);\r\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\r\n  const [isAddHospitalOpen, setIsAddHospitalOpen] = React.useState(false);\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [isEditHospitalOpen, setIsEditHospitalOpen] = React.useState(false);\r\n  const [isViewHospitalOpen, setIsViewHospitalOpen] = React.useState(false);\r\n  const [hospitalInfo, setHospitalInfo] = React.useState({});\r\n\r\n  const [selectedZone, setSelectedZone] = React.useState('');\r\n  const [selectedType, setSelectedType] = React.useState('');\r\n  const [isFreeBeds, setIsFreeBeds] = React.useState(false);\r\n  const [isGeneralBeds, setIsGeneralBeds] = React.useState(false);\r\n  const [isICUBeds, setIsICUBeds] = React.useState(false);\r\n\r\n  const [eHospitalId, seteHospitalId] = React.useState('');\r\n  const [eFreeBeds, seteFreeBeds] = React.useState('');\r\n  const [eGeneralBeds, seteGeneralBeds] = React.useState('');\r\n  const [eIcuBeds, seteIcuBeds] = React.useState('');\r\n\r\n\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const [diseaseList, setDiseaseList] = React.useState([]);\r\n  const [hospitalList, setHospitalList] = React.useState([]);\r\n  const loginHandler = (value) => {\r\n    setIsLoggedIn(value);\r\n  }\r\n\r\n  const handleSelectedZoneChange = (e) => {\r\n    setSelectedZone(e.target.value);\r\n  };\r\n  const handleSelectedType = (e) => {\r\n      setSelectedType(e.target.value);\r\n  };\r\n  const handleIsGeneralBedsChange = (e) => {\r\n    setIsGeneralBeds(e.target.value);\r\n};\r\nconst handleIsFreeBedsChange = (e) => {\r\n  setIsFreeBeds(e.target.value);\r\n};\r\n  const handleIsIcuBedsChange = (e) => {\r\n      setIsICUBeds(e.target.value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getLoggedInStatus();\r\n  }, [value]);\r\n\r\n  const viewHospital = (id, pos) => {\r\n    console.log(hospitalList[pos])\r\n    seteHospitalId(id);\r\n    setHospitalInfo(hospitalList[pos]);\r\n    toggleViewHospitalModal();\r\n  }\r\n\r\n  const editHospital = (id, pos) => {\r\n    \r\n    seteHospitalId(id);\r\n    seteFreeBeds(hospitalList[pos].freeBeds);\r\n    seteGeneralBeds(hospitalList[pos].generalBeds);\r\n    seteIcuBeds(hospitalList[pos].icuBeds);\r\n    toggleEditHospitalModal();\r\n  }\r\n\r\n  const searchHospital = () => {\r\n    searchHospitals(selectedZone, selectedType, isFreeBeds, isGeneralBeds, isICUBeds).then(resp => {\r\n      console.log(resp);\r\n      let data = resp.data;\r\n      console.log(data);\r\n      setHospitalList(data);\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n  }\r\n\r\n  const deleteHospital = (id) => {\r\n    console.log(id);\r\n    deleteHospitals(id).then(resp => {\r\n      if (resp.status === 500) {\r\n        setSnackMessage('Error occured during delete hospital');\r\n        setOpenSnack(true);\r\n      } else {\r\n        console.log(resp);\r\n        setSnackMessage('Hospital deleted successfully');\r\n        setOpenSnack(true);\r\n        getAllHospitals().then(resp => {\r\n          console.log(resp);\r\n          let data = resp.data;\r\n          console.log(data);\r\n          setHospitalList(data);\r\n        }).catch(error => {\r\n          console.log(\"login user err \" + error);\r\n        });\r\n      }\r\n\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getAllDiseases().then(resp => {\r\n      console.log(resp);\r\n      let data = resp.data;\r\n      console.log(data);\r\n      setDiseaseList(data);\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n    getAllHospitals().then(resp => {\r\n      console.log(resp);\r\n      let data = resp.data;\r\n      console.log(data);\r\n      setHospitalList(data);\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n  }, []);\r\n\r\n  function getLoggedInStatus() {\r\n    if (localStorage.getItem(\"name\") !== \"\" && localStorage.getItem(\"name\") !== undefined\r\n      && localStorage.getItem(\"name\") !== null) {\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setIsLoggedIn(false);\r\n    }\r\n  }\r\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '1200px !important',\r\n      height: '550px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const BootstrapDialogEditHospital = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '500px !important',\r\n      height: '380px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n  const BootstrapDialogViewHospital = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '1200px !important',\r\n      height: '850px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n  const BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n\r\n          >\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };\r\n\r\n\r\n  BootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n  function toggleEditHospitalModal() {\r\n    setIsEditHospitalOpen(!isEditHospitalOpen);\r\n    if (isEditHospitalOpen === true) {\r\n      getAllHospitals().then(resp => {\r\n        console.log(resp);\r\n        let data = resp.data;\r\n        console.log(data);\r\n        setHospitalList(data);\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n    }\r\n  }\r\n  const columns = [\r\n    { id: 'hospitalName', label: 'Hospital Name', minWidth: 100 },\r\n    { id: 'hospitalType', label: 'Type', minWidth: 40 },\r\n    { id: 'zoneType', label: 'Zone', minWidth: 20 },\r\n    { id: 'freeBeds', label: 'Free Beds', minWidth: 20 },\r\n    { id: 'icuBeds', label: 'ICU Beds', minWidth: 20 },\r\n    { id: 'generalBeds', label: 'General Beds', minWidth: 20 },\r\n    { id: 'city', label: 'City', minWidth: 20 },\r\n    { id: 'state', label: 'State', minWidth: 20 },\r\n    { id: 'patientSize', label: 'Patient count', minWidth: 20 },\r\n    { id: 'diseases', label: 'Treatment For', maxWidth: 20 },\r\n    { id: 'id', label: 'Action', minWidth: 250 },\r\n  ];\r\n\r\n  function toggleAddHospitalModal() {\r\n    setIsAddHospitalOpen(!isAddHospitalOpen);\r\n    if (isAddHospitalOpen === true) {\r\n      getAllHospitals().then(resp => {\r\n        console.log(resp);\r\n        let data = resp.data;\r\n        console.log(data);\r\n        setHospitalList(data);\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  function toggleViewHospitalModal() {\r\n    setIsViewHospitalOpen(!isViewHospitalOpen);\r\n    if (isViewHospitalOpen === true) {\r\n      getAllHospitals().then(resp => {\r\n        console.log(resp);\r\n        let data = resp.data;\r\n        console.log(data);\r\n        setHospitalList(data);\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header loginHandler={loginHandler} />\r\n      <br></br><br></br><br></br><br></br><br></br>\r\n\r\n      <Grid container direction=\"row\" style={{ padding: '10px' }}>\r\n        <Grid item xs={1}></Grid>\r\n        <Grid item xs={10}>\r\n\r\n\r\n        <FormControl required={true}  variant=\"standard\" style={{ textAlign: 'center', width:'20%' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">SELECT ZONE</InputLabel>\r\n                            <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={selectedZone}\r\n          onChange={handleSelectedZoneChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'red'}>RED</MenuItem>\r\n          <MenuItem value={'orange'}>ORANGE</MenuItem>\r\n          <MenuItem value={'green'}>GREEN</MenuItem>\r\n        </Select>\r\n                        </FormControl>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <FormControl required={true} variant=\"standard\" style={{ textAlign: 'center', width:'20%' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">HOSPITAL TYPE</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={selectedType}\r\n                                onChange={handleSelectedType}\r\n                            />\r\n                        </FormControl>\r\n                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <FormControl required={true}  variant=\"standard\" style={{ textAlign: 'center', width:'20%' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">WITH FREE BEDS</InputLabel>\r\n                            <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={isFreeBeds}\r\n          onChange={handleIsFreeBedsChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'true'}>YES</MenuItem>\r\n          <MenuItem value={'false'}>NO</MenuItem>\r\n        </Select>\r\n        </FormControl>\r\n        {/* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <FormControl required={true}  variant=\"standard\" style={{ textAlign: 'center', width:'10%' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">WITH GENERAL BEDS</InputLabel>\r\n                            <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={isGeneralBeds}\r\n          onChange={handleIsGeneralBedsChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'true'}>YES</MenuItem>\r\n          <MenuItem value={'false'}>NO</MenuItem>\r\n        </Select>\r\n        </FormControl>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <FormControl required={true}  variant=\"standard\" style={{ textAlign: 'center', width:'10%' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">WITH ICU BEDS</InputLabel>\r\n                            <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={isICUBeds}\r\n          onChange={handleIsIcuBedsChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'true'}>YES</MenuItem>\r\n          <MenuItem value={'false'}>NO</MenuItem>\r\n        </Select>\r\n        </FormControl>&nbsp;&nbsp;&nbsp; */}\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <Button variant=\"contained\" style={{ backgroundColor: \"orange\", marginTop:'10px'}} onClick={searchHospital}><SearchIcon />&nbsp;SEARCH</Button>\r\n          <Button variant=\"contained\" style={{ backgroundColor: \"darkkhaki\", float: 'right', marginTop:'10px' }} onClick={toggleAddHospitalModal}><MedicationIcon />&nbsp;ADD HOSPITAL</Button>\r\n          <br></br><br></br>\r\n          <TableContainer component={Paper}>\r\n            <Table stickyHeader aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {\r\n                    columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth, fontWeight: '700', backgroundColor: 'rgb(38, 38, 115)', color: 'white' }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))\r\n                  }\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {hospitalList.map((row, index) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {(column.id === 'city') ? (row['address'].city) : \r\n                              (column.id === 'state') ? (row['address'].state) : \r\n                                  (column.id === 'patientSize') ? (row['patients'].length): \r\n                                      (column.id === 'diseases') ? (row['diseases'].map((each, index) => (\r\n                                        \r\n                                        <Typography sx={{ fontSize: 14 }} ><ForwardIcon/>{each.diseaseName + \"(\" + each.variant + \")\"}</Typography>))): \r\n                                        (column.id === 'id') ? (\r\n                                          <>\r\n                                          <IconButton aria-label=\"view\" onClick={(e) => viewHospital(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                            <AppsIcon />\r\n                                          </IconButton>\r\n                                          <IconButton aria-label=\"edit\" onClick={(e) => editHospital(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                            <ModeEditIcon />\r\n                                          </IconButton>\r\n                                          <IconButton style={{ color: 'red' }} onClick={(e) => deleteHospital(value)} aria-label=\"delete\" size=\"large\">\r\n                                            <DeleteIcon />\r\n                                          </IconButton>\r\n                                        </>\r\n                                        ):value}\r\n\r\n\r\n                            \r\n                            {/* {(column.id === 'id') ? (\r\n                              <>\r\n                                <IconButton aria-label=\"edit\" onClick={(e) => editHospital(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                  <ModeEditIcon />\r\n                                </IconButton>\r\n                                <IconButton style={{ color: 'red' }} onClick={(e) => deleteHospital(value)} aria-label=\"delete\" size=\"large\">\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </>\r\n                            ) : value} */}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n        <Grid item xs={1}></Grid>\r\n      </Grid>\r\n\r\n      <BootstrapDialog\r\n        onClose={toggleAddHospitalModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isAddHospitalOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          ADD HOSPITAL\r\n        </BootstrapDialogTitle>\r\n\r\n        <AddHospital addHospitalModal={toggleAddHospitalModal} />\r\n\r\n      </BootstrapDialog>\r\n\r\n      <BootstrapDialogViewHospital\r\n        onClose={toggleViewHospitalModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isViewHospitalOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          VIEW HOSPITAL\r\n        </BootstrapDialogTitle>\r\n\r\n        <ViewHospital viewHospitalModal={toggleViewHospitalModal} hospitalInfo={hospitalInfo}/>\r\n\r\n      </BootstrapDialogViewHospital>\r\n\r\n      <BootstrapDialogEditHospital\r\n        onClose={toggleEditHospitalModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isEditHospitalOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          EDIT HOSPITAL\r\n        </BootstrapDialogTitle>\r\n\r\n        <EditHospital editHospitalModal={toggleEditHospitalModal}\r\n          hospitalId={eHospitalId}\r\n          efreeBeds={eFreeBeds}\r\n          egeneralBeds={eGeneralBeds} \r\n          eicuBeds={eIcuBeds} />\r\n\r\n\r\n      </BootstrapDialogEditHospital>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\util\\apiCalls.js",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Header.jsx",["97","98","99","100","101","102","103","104","105"],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addDisease.jsx",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editDisease.jsx",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addHospital.jsx",["106","107","108","109"],"import { FormControl, Grid, Input, InputLabel, Snackbar, Typography, MenuItem, Checkbox, ListItemText } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport Select from '@mui/material/Select';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\n\r\nimport * as React from 'react';\r\nimport { addDisease, addHospital, getAllDiseases } from '../util/apiCalls';\r\n\r\nexport default function AddHospital({ addHospitalModal }) {\r\n    const [hospitalName, setHospitalName] = React.useState('');\r\n    const [hospitalType, setHospitalType] = React.useState('');\r\n    const [freeBeds, setFreeBeds] = React.useState(0);\r\n    const [totalBeds, setTotalBeds] = React.useState(0);\r\n    const [generalBeds, setGeneralBeds] = React.useState(0);\r\n    const [icuBeds, setIcuBeds] = React.useState(0);\r\n    const [zone, setZone] = React.useState('');\r\n    const [street, setStreet] = React.useState('');\r\n    const [city, setCity] = React.useState('');\r\n    const [state, setState] = React.useState('');\r\n    const [diseases, setDiseases] = React.useState([]);\r\n    const [selectedDiseases, setSelectedDiseases] = React.useState([]);\r\n    const [snackMessage, setSnackMessage] = React.useState('');\r\n    const [openSnack, setOpenSnack] = React.useState(false);\r\n    const [diseaseList, setDiseaseList] = React.useState([]);\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n      PaperProps: {\r\n        style: {\r\n          maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n          width: 250,\r\n        },\r\n      },\r\n    };\r\n\r\n    const handleSnackClose = () => {\r\n        setOpenSnack(!openSnack);\r\n    };\r\n    const handleHospitalNameChange = (e) => {\r\n        setHospitalName(e.target.value);\r\n    };\r\n    const handleHospitalTypeChange = (e) => {\r\n        setHospitalType(e.target.value);\r\n    };\r\n\r\n    const handleTotalBedsChange = (e) => {\r\n        setTotalBeds(e.target.value);\r\n    };\r\n    const handleFreeBedsChange = (e) => {\r\n        setFreeBeds(e.target.value);\r\n    };\r\n    const handleGeneralBedsChange = (e) => {\r\n        setGeneralBeds(e.target.value);\r\n    };\r\n    const handleIcuBedsChange = (e) => {\r\n        setIcuBeds(e.target.value);\r\n    };\r\n    const handleZoneChange = (e) => {\r\n        setZone(e.target.value);\r\n    };\r\n    const handleStreetChange = (e) => {\r\n        setStreet(e.target.value);\r\n    };\r\n    const handleCityChange = (e) => {\r\n        setCity(e.target.value);\r\n    };\r\n    const handleStateChange = (e) => {\r\n        setState(e.target.value);\r\n    };\r\n    const handleDiseaseChange = (event) => {\r\n        const {\r\n            target: { value },\r\n          } = event;\r\n      \r\n          console.log(value);\r\n      \r\n          const filterdValue = value.filter(\r\n            (item) => diseases.findIndex((o) => o.id === item.id) >= 0\r\n          );\r\n      \r\n          let duplicatesRemoved = value.filter((item, itemIndex) =>\r\n            value.findIndex((o, oIndex) => o.id === item.id && oIndex !== itemIndex)\r\n          );\r\n      \r\n          let duplicateRemoved = [];\r\n      \r\n          value.forEach((item) => {\r\n            if (duplicateRemoved.findIndex((o) => o.id === item.id) >= 0) {\r\n              duplicateRemoved = duplicateRemoved.filter((x) => x.id === item.id);\r\n            } else {\r\n              duplicateRemoved.push(item);\r\n            }\r\n          });\r\n          let hospitalIds = [];\r\n          console.log(duplicateRemoved);\r\n          duplicateRemoved.map(each=> {\r\n            hospitalIds.push(each.id);\r\n          })\r\n          setSelectedDiseases(hospitalIds);\r\n          setDiseases(duplicateRemoved);\r\n      };\r\n    React.useEffect(() => {\r\n        getAllDiseases().then(resp => {\r\n          console.log(resp);\r\n          let data = resp.data;\r\n          console.log(data);\r\n          setDiseaseList(data);\r\n        }).catch(error => {\r\n          console.log(\"login user err \" + error);\r\n        });\r\n    \r\n      }, []);\r\n    function addNewHospital() {\r\n        if (hospitalName === \"\" || hospitalName === undefined || hospitalType === \"\" || hospitalType === undefined ||\r\n            zone === \"\" || zone === undefined || freeBeds === \"\" || freeBeds === undefined || generalBeds === \"\" || generalBeds === undefined ||\r\n            totalBeds === \"\" || totalBeds === undefined || icuBeds === \"\" || icuBeds === undefined || street === \"\" || street === undefined || state === \"\" || state === undefined ||\r\n            selectedDiseases.length===0\r\n        ) {\r\n            setSnackMessage('Fields cannot be blank');\r\n            setOpenSnack(true);\r\n        } else if (parseInt(totalBeds) !== (parseInt(icuBeds)+parseInt(freeBeds)+parseInt(generalBeds))){\r\n            setSnackMessage('Total beds count is not matching!');\r\n            setOpenSnack(true);\r\n        } else {\r\n            addHospital(hospitalName, hospitalType, zone, freeBeds, generalBeds, icuBeds,\r\n                street, city, state, selectedDiseases).then(resp => {\r\n                console.log(resp);\r\n                let data = resp.data;\r\n                console.log(data);\r\n                setSnackMessage('Hospital added successfully');\r\n                setOpenSnack(true);\r\n                addHospitalModal();\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n           \r\n                    <DialogContent>\r\n                    <Grid container spacing={2} >\r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                            <Typography>Details:</Typography>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Hospital Name</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={hospitalName}\r\n                                onChange={handleHospitalNameChange}\r\n                            />\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Hospital Type</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={hospitalType}\r\n                                onChange={handleHospitalTypeChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\">\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Zone</InputLabel>\r\n                            <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={zone}\r\n          onChange={handleZoneChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'red'}>RED</MenuItem>\r\n          <MenuItem value={'orange'}>ORANGE</MenuItem>\r\n          <MenuItem value={'green'}>GREEN</MenuItem>\r\n        </Select>\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                        <Typography>Beds count:</Typography>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Total Beds</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'number'}\r\n                                inputProps= {{ min: 0}} \r\n                                value={totalBeds}\r\n                                onChange={handleTotalBedsChange}\r\n                            />\r\n                        </FormControl>\r\n                        \r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter General Beds</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'number'}\r\n                                inputProps= {{ min: 0}} \r\n                                value={generalBeds}\r\n                                onChange={handleGeneralBedsChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter ICU Beds</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'number'}\r\n                                inputProps= {{ min: 0}} \r\n                                value={icuBeds}\r\n                                onChange={handleIcuBedsChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <br></br><br></br>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                        <Typography>Address:</Typography>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Street</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={street}\r\n                                onChange={handleStreetChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n                       \r\n\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter City</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={city}\r\n                                onChange={handleCityChange}\r\n                            />\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter State</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={state}\r\n                                onChange={handleStateChange}\r\n                            />\r\n                        </FormControl>\r\n                        </Grid>\r\n                        <br></br><br></br>\r\n\r\n                        <Grid item xs={4}>\r\n                        \r\n\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id=\"demo-multiple-checkbox-label\">Treatment for</InputLabel>\r\n                            <Select\r\n                            labelId=\"demo-multiple-checkbox-label\"\r\n                            id=\"demo-multiple-checkbox\"\r\n                            multiple\r\n                            value={diseases}\r\n                            onChange={handleDiseaseChange}\r\n                            input={<OutlinedInput label=\"Treatment for\" />}\r\n                            renderValue={(selected) => selected.map((x) => x.diseaseName+\"(\"+x.variant+\")\").join(', ')}\r\n                            MenuProps={MenuProps}\r\n                            >\r\n                            {\r\n                                diseaseList.map(variant => (\r\n                                    <MenuItem key={variant.id} value={variant}>\r\n                                        <Checkbox\r\n                                        checked={\r\n                                            diseases.findIndex((item) => item.id === variant.id) >= 0\r\n                                            }\r\n                                        />\r\n                                        <ListItemText primary={variant.diseaseName+\"(\"+variant.variant+\")\"} />\r\n                                    </MenuItem>\r\n                                ))\r\n                            }\r\n                            </Select>\r\n                        </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Free Beds</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'number'}\r\n                                inputProps= {{ min: 0}} \r\n                                value={freeBeds}\r\n                                onChange={handleFreeBedsChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n\r\n                        </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions align='center'>\r\n                        <Button variant=\"contained\" style={{ backgroundColor: \"green\" }} onClick={addNewHospital}>&nbsp;Add</Button>\r\n\r\n                        {/* <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dont have an account? <Button color=\"primary\" onClick={clickSignUp}>Sign up</Button></Typography> */}\r\n                    </DialogActions>\r\n                \r\n            <Snackbar\r\n                style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n                autoHideDuration={3000}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                open={openSnack}\r\n                onClose={handleSnackClose}\r\n                message={snackMessage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editHospital.jsx",[],"C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\viewHospital.jsx",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"import { Box, CardContent, FormControl, Grid, Input, InputLabel, Snackbar, Typography } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\r\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport * as React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { addDisease, getHospitalById } from '../util/apiCalls';\r\nimport { Card } from 'react-bootstrap';\r\nimport AddPatient from './addPatient';\r\nimport EditPatient from './editPatient';\r\n\r\nexport default function ViewHospital({ viewHospitalModal, hospitalInfo }) {\r\n    const [hospitalId, setHospitalId] = React.useState(hospitalInfo.id);\r\n    const [patientList, setPatientList] = React.useState(hospitalInfo.patients);\r\n    const [patientName, setPatientName] = React.useState('');\r\n    const [patientStatus, setPatientStatus] = React.useState('');\r\n    const [selectedPatientId, setSelectedPatientId] = React.useState('');\r\n    const [diseaseList, setDiseaseList] = React.useState(hospitalInfo.diseases);\r\n    const [isAddPatientOpen, setIsAddPatientOpen] = React.useState(false);\r\n    const [diseaseId, setDiseaseId] = React.useState(hospitalInfo.id);\r\n    const [city, setCity] = React.useState('');\r\n    const [state, setState] = React.useState('');\r\n    const [street, setStreet] = React.useState('');\r\n    const [patientAge, setPatientAge] = React.useState('');\r\n    const [labTest, setLabTest] = React.useState('');\r\n    const [isEditPatientOpen, setIsEditPatientOpen] = React.useState(false);\r\n    const [snackMessage, setSnackMessage] = React.useState('');\r\n    const [openSnack, setOpenSnack] = React.useState(false);\r\n    const handleSnackClose = () => {\r\n        setOpenSnack(!openSnack);\r\n    };\r\n    // const handleDiseaseVarientChange = (e) => {\r\n    //     setDiseaseVarient(e.target.value);\r\n    // };\r\n    // const handleDiseaseNameChange = (e) => {\r\n    //     setDiseaseName(e.target.value);\r\n    // };\r\n    // const handleVirusNameChange = (e) => {\r\n    //     setVirusName(e.target.value);\r\n    // };\r\n    const BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n        '& .MuiDialog-paper': {\r\n          padding: theme.spacing(2),\r\n          minWidth: '1200px !important',\r\n          height: '550px'\r\n        },\r\n        '& .MuiDialogActions-root': {\r\n          padding: theme.spacing(1),\r\n        },\r\n      }));\r\n\r\n      const BootstrapDialogEditPatient = styled(Dialog)(({ theme }) => ({\r\n        '& .MuiDialog-paper': {\r\n          padding: theme.spacing(2),\r\n          minWidth: '500px !important',\r\n          height: '370px'\r\n        },\r\n        '& .MuiDialogActions-root': {\r\n          padding: theme.spacing(1),\r\n        },\r\n      }));\r\n      const BootstrapDialogTitle = (props) => {\r\n        const { children, onClose, ...other } = props;\r\n        return (\r\n          <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n              <IconButton\r\n                aria-label=\"close\"\r\n                onClick={onClose}\r\n    \r\n              >\r\n              </IconButton>\r\n            ) : null}\r\n          </DialogTitle>\r\n        );\r\n      };\r\n    \r\n    \r\n      BootstrapDialogTitle.propTypes = {\r\n        children: PropTypes.node,\r\n        onClose: PropTypes.func.isRequired,\r\n      };\r\n\r\n      function toggleAddPatientModal() {\r\n        setIsAddPatientOpen(!isAddPatientOpen);\r\n        if (isAddPatientOpen === true) {\r\n            getHospitalById(hospitalId).then(resp => {\r\n                console.log(resp);\r\n                let data = resp.data;\r\n                console.log(data);\r\n                setPatientList(data.patients);\r\n              }).catch(error => {\r\n                console.log(\"login user err \" + error);\r\n              });\r\n        }\r\n      }\r\n\r\n      function toggleEditPatientModal() {\r\n        setIsEditPatientOpen(!isEditPatientOpen);\r\n        if (isEditPatientOpen === true) {\r\n            getHospitalById(hospitalId).then(resp => {\r\n                console.log(resp);\r\n                let data = resp.data;\r\n                console.log(data);\r\n                setPatientList(data.patients);\r\n              }).catch(error => {\r\n                console.log(\"login user err \" + error);\r\n              });\r\n        }\r\n      }\r\n    const columns = [\r\n        { id: 'patientName', label: 'Patient Name', minWidth: 140 },\r\n        { id: 'patientStatus', label: 'Current status', minWidth: 40 },\r\n        { id: 'patientAge', label: 'Age', minWidth: 40 },\r\n        { id: 'labTest', label: 'Lab Test', minWidth: 40 },\r\n        { id: 'disease', label: 'Disease', minWidth: 120 },\r\n        { id: 'city', label: 'City', minWidth: 120 },\r\n        { id: 'state', label: 'State', minWidth: 120 },\r\n        { id: 'id', label: 'Action', minWidth: 120 },\r\n      ];\r\n\r\n      React.useEffect(() => {\r\n        getHospitalById(hospitalId).then(resp => {\r\n          console.log(resp);\r\n          let data = resp.data;\r\n          console.log(data);\r\n          setPatientList(data.patients);\r\n        }).catch(error => {\r\n          console.log(\"login user err \" + error);\r\n        });\r\n      }, []);\r\n\r\n    //function editPatient(id){alert(id)}\r\n    const editPatient = (id, pos) => {\r\n        setSelectedPatientId(id);\r\n        toggleEditPatientModal();\r\n      }\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent>\r\n                <Grid container >\r\n                    <Grid xs={4}>\r\n                        <Box sx={{ minWidth: 275 }}>\r\n                            <Card variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h5\" component=\"div\">\r\n                                        {hospitalInfo.hospitalName} ({hospitalInfo.hospitalType})\r\n\r\n                                    </Typography>\r\n                                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                                        {hospitalInfo.address.street}, <br></br>\r\n                                        {hospitalInfo.address.city}, <br></br>\r\n                                        {hospitalInfo.address.state}\r\n                                    </Typography>\r\n                                    <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n                                        ZONE: {hospitalInfo.zoneType}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid xs={4}>\r\n                        <br></br>\r\n\r\n                        <TableContainer component={Paper}>\r\n                            <Table sx={{ minWidth: 150 }} aria-label=\"simple table\">\r\n\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>Free Beds</TableCell>\r\n                                        <TableCell> {hospitalInfo.freeBeds}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>General Beds</TableCell>\r\n                                        <TableCell> {hospitalInfo.generalBeds}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>ICU Beds</TableCell>\r\n                                        <TableCell> {hospitalInfo.icuBeds}</TableCell>\r\n                                    </TableRow></TableBody></Table>\r\n                        </TableContainer>\r\n                    </Grid> <br></br>\r\n                    <Grid xs={3} style={{ padding: '30px', marginLeft: '20px', marginTop: '20px', backgroundColor: 'aliceblue' }} component={Paper}>\r\n\r\n                        <Typography variant=\"h6\" component=\"div\">Treatment for:</Typography>\r\n                        {\r\n                            hospitalInfo.diseases.map(each => (\r\n                                <Typography sx={{ fontSize: 14 }} > {each.diseaseName + \"(\" + each.variant + \")\"}</Typography>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction=\"row\" style={{ padding: '10px' }}>\r\n        <Grid item xs={1}></Grid>\r\n        <Grid item xs={10}>\r\n            \r\n          <Button variant=\"contained\" style={{ backgroundColor: \"darkkhaki\", float: 'right' }} onClick={toggleAddPatientModal}><PersonAddAlt1Icon />&nbsp;ADD PATIENT</Button>\r\n          <br></br><br></br>\r\n          <TableContainer component={Paper}>\r\n            <Table stickyHeader aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {\r\n                    columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth, fontWeight: '700', backgroundColor: 'rgb(38, 38, 115)', color: 'white' }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))\r\n                  }\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {patientList.map((row, index) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {(column.id === 'city') ? (row['address'].city) : \r\n                             (column.id === 'disease') ? (row['disease'].diseaseName+\"(\"+row['disease'].variant+\")\") : \r\n                              (column.id === 'state') ? (row['address'].state) : \r\n                                        (column.id === 'id') ? (\r\n                                          <>\r\n                                          <IconButton aria-label=\"edit\" onClick={(e) => editPatient(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                            <ModeEditIcon />\r\n                                          </IconButton>\r\n                                        </>\r\n                                        ):value}\r\n\r\n\r\n                            \r\n                            {/* {(column.id === 'id') ? (\r\n                              <>\r\n                                <IconButton aria-label=\"edit\" onClick={(e) => editHospital(value, index)} style={{ color: 'rgb(38, 38, 115)' }} size=\"large\">\r\n                                  <ModeEditIcon />\r\n                                </IconButton>\r\n                                <IconButton style={{ color: 'red' }} onClick={(e) => deleteHospital(value)} aria-label=\"delete\" size=\"large\">\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </>\r\n                            ) : value} */}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n        <Grid item xs={1}></Grid>\r\n      </Grid>\r\n            </DialogContent>\r\n            <DialogActions align='center'>\r\n                <Button variant=\"contained\" style={{ backgroundColor: \"green\" }} onClick={viewHospitalModal}>&nbsp;CLOSE</Button>\r\n\r\n                {/* <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dont have an account? <Button color=\"primary\" onClick={clickSignUp}>Sign up</Button></Typography> */}\r\n            </DialogActions>\r\n           \r\n           \r\n           \r\n           \r\n           \r\n           \r\n            <BootstrapDialog\r\n        onClose={toggleAddPatientModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isAddPatientOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          ADD PATIENT\r\n        </BootstrapDialogTitle>\r\n\r\n        <AddPatient addPatientModal={toggleAddPatientModal} diseaseList={diseaseList} hospitalId={hospitalId}/>\r\n\r\n      </BootstrapDialog>\r\n\r\n      <BootstrapDialogEditPatient\r\n        onClose={toggleEditPatientModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isEditPatientOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', backgroundColor: '#262673', color: 'white' }}>\r\n          UPDATE PATIENT\r\n        </BootstrapDialogTitle>\r\n\r\n        <EditPatient editPatientModal={toggleEditPatientModal} patientId={selectedPatientId}/>\r\n\r\n      </BootstrapDialogEditPatient>\r\n\r\n\r\n            <Snackbar\r\n                style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n                autoHideDuration={3000}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                open={openSnack}\r\n                onClose={handleSnackClose}\r\n                message={snackMessage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Login.jsx",["136","137"],"import {\r\n  FormControl, Grid, Snackbar, TextField\r\n} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport { login } from '../util/apiCalls';\r\nimport Register from './Register';\r\nexport default function Login({ toggleModal, loginButton, isEmployee }) {\r\n\r\n\r\n  //This js file is to handle login user related design & backend API calls\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [lusername, setLUsername] = React.useState(\"\");\r\n  const [lpassword, setLPassword] = React.useState(\"\");\r\n  const [invalidError, setInvalidError] = React.useState('');\r\n  const [isSignUpOpen, setIsSignUpOpen] = React.useState(false);\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const lpasswordChange = (event) => {\r\n    setLPassword(event.target.value);\r\n  }\r\n\r\n  const lusernameChange = (event) => {\r\n    setLUsername(event.target.value);\r\n  }\r\n\r\n  //This method is to call backend, once all validations success\r\n  const clickSignUp = () => {\r\n\r\n    toggleSignUpModal();\r\n    //toggleModal();\r\n    //setIsSignUpOpen(!isSignUpOpen);\r\n  }\r\n\r\n\r\n  const clickLogin = () => {\r\n    console.log(\"signin clicked\");\r\n    if (lusername === \"\" || lusername === undefined || lpassword === \"\" || lpassword === undefined) {\r\n      setOpenSnack(true);\r\n    } else {\r\n      console.log(\"signin clicked else\");\r\n      login(lusername, lpassword).then(resp => {\r\n          console.log(resp);\r\n          if (resp.status === 400) {\r\n            setInvalidError('Invalid credentials!');\r\n          } else {\r\n            let data = resp.data;\r\n              console.log(data);\r\n              if (data !== null && data.email !== undefined && data.email !== \"\" && data.email !== \"undefined\"\r\n                && data.email !== null) {\r\n                localStorage.setItem(\"name\", data.firstName + \" \" + data.lastName);\r\n                localStorage.setItem(\"email\", data.email);\r\n                localStorage.setItem(\"mobile\", data.mobile);\r\n                localStorage.setItem(\"role\", data.role);\r\n                localStorage.setItem(\"userId\", data.id);\r\n                loginButton(\"LOGOUT\");\r\n                toggleModal();\r\n\r\n              } else {\r\n                setInvalidError('Invalid credentials!');\r\n              }\r\n          }\r\n\r\n        }).catch(error => {\r\n          console.log(error);\r\n          setInvalidError(error.response.data.message);\r\n          console.log(\"login user err \" + error);\r\n        });\r\n    }\r\n  }\r\n\r\n  const toggleSignUpModal = () => {\r\n    setIsSignUpOpen(!isSignUpOpen);\r\n\r\n  }\r\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      overflowY: 'unset',\r\n      padding: theme.spacing(2),\r\n\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n  const BootstrapProfileDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n      minWidth:'200px'\r\n    },\r\n  }));\r\n  const BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n              position: 'absolute',\r\n              right: 8,\r\n              top: 8,\r\n              color: (theme) => theme.palette.grey[500],\r\n            }}\r\n          >\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };\r\n\r\n  BootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container style={{ width: '1500px !important' }}>\r\n\r\n        {/* <Grid item xs={5}>\r\n          <img\r\n            className=\"\"\r\n            //src={require(\"../../assets/img/pattern_react.png\").default}\r\n            src={loginImg}\r\n\r\n            alt=\"...\"\r\n          />\r\n\r\n\r\n        </Grid> */}\r\n        <Grid item xs={12}>\r\n          <DialogContent>\r\n            <FormControl required={true} fullWidth sx={{ m: 1 }} variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                label=\"Username\"\r\n                id=\"standard-adornment-lusername\"\r\n                type={'text'}\r\n                defaultValue={lusername}\r\n                onBlur={lusernameChange}\r\n              />\r\n            </FormControl><br></br><br></br>\r\n            <FormControl required={true} fullWidth sx={{ m: 1 }} variant=\"standard\" style={{ textAlign: 'center' }}>\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                id=\"standard-adornment-lpassword\"\r\n                type={'password'}\r\n                defaultValue={lpassword}\r\n                onBlur={lpasswordChange}\r\n              />\r\n            </FormControl>\r\n            <br></br>\r\n            <span style={{\r\n              fontWeight: 'bold',\r\n              color: 'red',\r\n            }}>{invalidError}</span>\r\n\r\n          </DialogContent>\r\n          <DialogActions align='center'>\r\n            <Button variant=\"contained\" style={{ backgroundColor: \"darkkhaki\" }} onClick={clickLogin}>&nbsp;SIGNIN</Button>\r\n\r\n            <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dont have an account? <Button color=\"primary\" onClick={toggleSignUpModal}>Sign up</Button></Typography>\r\n          </DialogActions>\r\n          <BootstrapProfileDialog\r\n            onClose={toggleSignUpModal}\r\n            aria-labelledby=\"customized-dialog-title\"\r\n            open={isSignUpOpen}\r\n          >\r\n            <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={toggleSignUpModal} style={{ backgroundColor: '#262673', textAlign: 'center', color: 'white' }}>\r\n              REGISTER\r\n            </BootstrapDialogTitle>\r\n\r\n            <Register toggleModal={toggleSignUpModal} />\r\n          </BootstrapProfileDialog>\r\n          <Snackbar\r\n            style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n            autoHideDuration={1300}\r\n            anchorOrigin={{\r\n              vertical: \"center\",\r\n              horizontal: \"center\"\r\n            }}\r\n            open={openSnack}\r\n            onClose={handleSnackClose}\r\n            message=\"Please fill out this field\"\r\n          />\r\n\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n\r\n  );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\Register.jsx",["138","139","140","141"],"import {\r\n  FormControl, Grid, Input, InputLabel, Snackbar\r\n} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport Typography from '@mui/material/Typography';\r\nimport * as React from 'react';\r\nimport { registerUser } from '../util/apiCalls';\r\n\r\n\r\n\r\nexport default function Register({ toggleModal }) {\r\n  //This js file is mainly to register users and it will take care all validations as well\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [emailError, setEmailError] = React.useState('');\r\n  const [mobileError, setMobileError] = React.useState('');\r\n  const [cpasswordError, setcPasswordError] = React.useState('');\r\n  const [invalidError, setInvalidError] = React.useState('');\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const passwordChange = (event) => {\r\n    setPassword(event.target.value);\r\n    if (!passwordLength(event.target.value)) {\r\n      setcPasswordError('Password length should more than 8');\r\n    } else {\r\n      setcPasswordError('');\r\n    }\r\n  }\r\n\r\n  const emailChange = (event) => {\r\n    setEmail(event.target.value);\r\n    if (!ValidateEmail(event.target.value)) {\r\n      setEmailError('Enter valid Email!');\r\n    } else {\r\n      setEmailError('');\r\n    }\r\n  }\r\n\r\n  const fnameChange = (event) => {\r\n    setFName(event.target.value);\r\n  }\r\n\r\n  const lnameChange = (event) => {\r\n    setLName(event.target.value);\r\n  }\r\n \r\n  const cnumberChange = (event) => {\r\n    setCnumber(event.target.value);\r\n    if (!phonenumber(event.target.value)) {\r\n      setMobileError('Enter valid Mobile!');\r\n    } else {\r\n      setMobileError('');\r\n    }\r\n  }\r\n\r\n  const roleChange = (event) => {\r\n    setRole(event.target.value);\r\n  }\r\n\r\n  const clickRegister = () => {\r\n    if (email === \"\" || email === undefined || password === \"\" || password === undefined ||\r\n      fname === \"\" || fname === undefined || lname === \"\" || lname === undefined || cnumber === \"\"\r\n      || cnumber === undefined || role === \"\" || role === undefined) {\r\n      setSnackMessage('Please fill out this field');\r\n      setOpenSnack(true);\r\n    } else if (!ValidateEmail(email) || !phonenumber(cnumber)) {\r\n      return false;\r\n    } else if (!passwordLength(password)) {\r\n      return false;\r\n    } else {\r\n      registerUser(fname, lname, email, password, cnumber, role).then(res => {\r\n        setFName(\"\");\r\n        setLName(\"\");\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        setCnumber(\"\");\r\n        setRole(\"\");\r\n        setSnackMessage('Registration success!, Please log in');\r\n        setOpenSnack(true);\r\n      })\r\n        .catch(error => {\r\n          console.log(\"Regiter failed\" + error);\r\n          setInvalidError(error.response.data.message);\r\n        })\r\n    }\r\n  }\r\n\r\n  function ValidateEmail(mail) {\r\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(mail)) {\r\n      return (true)\r\n    }\r\n    return (false)\r\n  }\r\n\r\n  function phonenumber(mobile) {\r\n    var phoneno = /^\\d{10}$/;\r\n    if (mobile.match(phoneno)) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function passwordLength(password){\r\n    return password.length>=8;\r\n  }\r\n\r\n  const [logButtonName, setlogButtonName] = React.useState(\"LOGIN\");\r\n\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [fname, setFName] = React.useState(\"\");\r\n  const [lname, setLName] = React.useState(\"\");\r\n  const [cnumber, setCnumber] = React.useState(\"\");\r\n  const [role, setRole] = React.useState(\"\");\r\n  return (\r\n    <React.Fragment>\r\n      <DialogContent>\r\n        <FormControl required={true}  fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n          <InputLabel htmlFor=\"standard-adornment-fname\">First Name</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-fname\"\r\n            type={'text'}\r\n            value={fname}\r\n            onChange={fnameChange}\r\n          />\r\n        </FormControl><br></br><br></br>\r\n        <FormControl required={true}  fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n          <InputLabel htmlFor=\"standard-adornment-fname\">Last Name</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-fname\"\r\n            type={'text'}\r\n            value={lname}\r\n            onChange={lnameChange}\r\n          />\r\n        </FormControl><br></br><br></br>\r\n        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n          <InputLabel htmlFor=\"standard-adornment-email\">Email</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-email\"\r\n            type={'text'}\r\n            value={email}\r\n            onChange={emailChange}\r\n          />\r\n        </FormControl>\r\n        <br></br>\r\n        <span style={{\r\n          fontWeight: 'bold',\r\n          color: 'red',\r\n        }}>{emailError}</span>\r\n        <br></br>\r\n        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n          <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-password\"\r\n            type={'password'}\r\n            value={password}\r\n            onChange={passwordChange}\r\n          />\r\n        </FormControl>\r\n        <span style={{\r\n          fontWeight: 'bold',\r\n          color: 'red',\r\n        }}>{cpasswordError}</span>\r\n        <br></br><br></br>\r\n        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n          <InputLabel htmlFor=\"standard-adornment-cnumber\">Contact Number</InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-cnumber\"\r\n            type={'text'}\r\n            value={cnumber}\r\n            onChange={cnumberChange}\r\n          />\r\n        </FormControl><br></br>\r\n        <span style={{\r\n          fontWeight: 'bold',\r\n          color: 'red',\r\n        }}>{mobileError}</span>\r\n        <br></br>\r\n        \r\n        <FormControl fullWidth required={true}  variant=\"standard\">\r\n        <InputLabel id=\"demo-simple-select-label\">Role</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={role}\r\n          label=\"Role\"\r\n          onChange={roleChange}\r\n        >\r\n          <MenuItem value={\"admin\"}>ADMIN</MenuItem>\r\n          <MenuItem value={\"user\"}>USER</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <br></br>\r\n            <span style={{\r\n              fontWeight: 'bold',\r\n              color: 'red',\r\n            }}>{invalidError}</span>\r\n      </DialogContent>\r\n      <DialogActions align='center'>\r\n        <Grid container justify=\"center\">\r\n          <Button variant=\"contained\" style={{ backgroundColor: \"darkkhaki\" }} onClick={clickRegister} >REGISTER</Button>\r\n          <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Already had an account? <Button color=\"primary\" onClick={toggleModal}>Sign IN</Button></Typography>\r\n        </Grid>\r\n      </DialogActions>\r\n\r\n      <Snackbar\r\n       style={{whiteSpace: 'pre-wrap', width:'300px', top:'50%',bottom:'50%', left:'40%', right:'50%'}}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\editPatient.jsx",["142","143","144","145","146","147","148","149","150","151","152"],"import { FormControl, Grid, Input, InputLabel, Snackbar, Typography, MenuItem, Checkbox, ListItemText } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport Select from '@mui/material/Select';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\n\r\nimport * as React from 'react';\r\nimport { addDisease, addHospital, addPatients, editPatients, getAllDiseases } from '../util/apiCalls';\r\n\r\nexport default function EditPatient({ editPatientModal, patientId}) {\r\n    const [patientStatus, setPatientStatus] = React.useState('');\r\n    const [labtest, setLabTest] = React.useState('');\r\n    const [snackMessage, setSnackMessage] = React.useState('');\r\n    const [openSnack, setOpenSnack] = React.useState(false);\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n      PaperProps: {\r\n        style: {\r\n          maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n          width: 250,\r\n        },\r\n      },\r\n    };\r\n    const handleSnackClose = () => {\r\n        setOpenSnack(!openSnack);\r\n    };\r\n    const handlePatientStatusChange = (e) => {\r\n        setPatientStatus(e.target.value);\r\n    };\r\n    const handleLabTestChange = (e) => {\r\n        setLabTest(e.target.value);\r\n    };\r\n    \r\n    \r\n      function editPatient() {\r\n        if (patientStatus === \"\" || patientStatus === undefined || labtest === \"\" || labtest === undefined) {\r\n            setSnackMessage('Fields cannot be blank');\r\n            setOpenSnack(true);\r\n        } else {\r\n            editPatients(patientStatus, labtest, patientId).then(resp => {\r\n                console.log(resp);\r\n                let data = resp.data;\r\n                console.log(data);\r\n                setSnackMessage('Patient updated successfully');\r\n                setOpenSnack(true);\r\n                editPatientModal();\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n           \r\n                    <DialogContent>\r\n                        <br></br><br></br>\r\n                            \r\n\r\n                        <FormControl required={true} fullWidth variant=\"standard\">\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Patient Status</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={patientStatus}\r\n          onChange={handlePatientStatusChange}\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'recovered'}>RECOVERED</MenuItem>\r\n          <MenuItem value={'isolated'}>ISOLATED</MenuItem>\r\n          <MenuItem value={'confirmed'}>CONFIRMED</MenuItem>\r\n          <MenuItem value={'death'}>DEATH</MenuItem>\r\n        </Select>\r\n\r\n\r\n\r\n                        </FormControl>\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\">\r\n                        <InputLabel id=\"demo-simple-select-standard-label\">Enter Lab Test</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={labtest}\r\n          onChange={handleLabTestChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'positive'}>POSITIVE</MenuItem>\r\n          <MenuItem value={'negative'}>NEGATIVE</MenuItem>\r\n        </Select>\r\n                            \r\n                            \r\n                            \r\n                        </FormControl>\r\n\r\n                        \r\n                    </DialogContent>\r\n                    <DialogActions align='center'>\r\n                        <Button variant=\"contained\" style={{ backgroundColor: \"green\" }} onClick={editPatient}>&nbsp;UPDATE</Button>\r\n\r\n                        {/* <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dont have an account? <Button color=\"primary\" onClick={clickSignUp}>Sign up</Button></Typography> */}\r\n                    </DialogActions>\r\n                \r\n            <Snackbar\r\n                style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n                autoHideDuration={3000}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                open={openSnack}\r\n                onClose={handleSnackClose}\r\n                message={snackMessage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\SREENA\\Downloads\\UI_Backend\\CvdTrackerUI\\src\\components\\addPatient.jsx",["153","154","155","156","157","158"],"import { FormControl, Grid, Input, InputLabel, Snackbar, Typography, MenuItem, Checkbox, ListItemText } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport Select from '@mui/material/Select';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\n\r\nimport * as React from 'react';\r\nimport { addDisease, addHospital, addPatients, getAllDiseases } from '../util/apiCalls';\r\n\r\nexport default function AddPatient({ addPatientModal, diseaseList, hospitalId}) {\r\n    const [patientName, setPatientName] = React.useState('');\r\n    const [patientStatus, setPatientStatus] = React.useState('');\r\n    const [age, setAge] = React.useState('');\r\n    const [labtest, setLabTest] = React.useState('');\r\n    const [street, setStreet] = React.useState('');\r\n    const [city, setCity] = React.useState('');\r\n    const [state, setState] = React.useState('');\r\n    const [diseases, setDiseases] = React.useState([]);\r\n    const [diseaseId, setDiseaseId] = React.useState('');\r\n    const [snackMessage, setSnackMessage] = React.useState('');\r\n    const [openSnack, setOpenSnack] = React.useState(false);\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n      PaperProps: {\r\n        style: {\r\n          maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n          width: 250,\r\n        },\r\n      },\r\n    };\r\n\r\n    const handleDiseaseChange = (event) => {\r\n        const {\r\n            target: { value },\r\n          } = event;\r\n      \r\n          console.log(value);\r\n          setDiseaseId(value.id);\r\n          setDiseases(value);\r\n      };\r\n\r\n    const handleSnackClose = () => {\r\n        setOpenSnack(!openSnack);\r\n    };\r\n    const handlePatientNameChange = (e) => {\r\n        setPatientName(e.target.value);\r\n    };\r\n    const handlePatientStatusChange = (e) => {\r\n        setPatientStatus(e.target.value);\r\n    };\r\n    const handleAgeChange = (e) => {\r\n        setAge(e.target.value);\r\n    };\r\n    const handleLabTestChange = (e) => {\r\n        setLabTest(e.target.value);\r\n    };\r\n    const handleDiseaseIdChange = (e) => {\r\n        setDiseaseId(e.target.value);\r\n    };\r\n    const handleStreetChange = (e) => {\r\n        setStreet(e.target.value);\r\n    };\r\n    const handleCityChange = (e) => {\r\n        setCity(e.target.value);\r\n    };\r\n    const handleStateChange = (e) => {\r\n        setState(e.target.value);\r\n    };\r\n    \r\n      function addPatient() {\r\n        if (patientName === \"\" || patientName === undefined || patientStatus === \"\" || patientStatus === undefined ||\r\n        age === \"\" || age === undefined || labtest === \"\" || labtest === undefined  || diseaseId ===\"\" || diseaseId === undefined\r\n        || city === undefined || city === \"\" || state === undefined || state === \"\" || street === undefined || street === \"\" \r\n        ) {\r\n            alert(diseaseId);\r\n            setSnackMessage('Fields cannot be blank');\r\n            setOpenSnack(true);\r\n        } else {\r\n            addPatients(patientName, patientStatus, age, labtest, hospitalId, diseaseId,\r\n                street, city, state\r\n                ).then(resp => {\r\n                console.log(resp);\r\n                let data = resp.data;\r\n                console.log(data);\r\n                setSnackMessage('Patient added successfully');\r\n                setOpenSnack(true);\r\n                addPatientModal();\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n           \r\n                    <DialogContent>\r\n                    <Grid container spacing={2} >\r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                            <Typography>Details:</Typography>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Patient Name</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={patientName}\r\n                                onChange={handlePatientNameChange}\r\n                            />\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n\r\n                        <FormControl required={true} fullWidth variant=\"standard\">\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Patient Status</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={patientStatus}\r\n          onChange={handlePatientStatusChange}\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'recovered'}>RECOVERED</MenuItem>\r\n          <MenuItem value={'isolated'}>ISOLATED</MenuItem>\r\n          <MenuItem value={'confirmed'}>CONFIRMED</MenuItem>\r\n          <MenuItem value={'death'}>DEATH</MenuItem>\r\n        </Select>\r\n\r\n\r\n\r\n                        </FormControl>\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Age</InputLabel>\r\n                            <Input min={0}\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'number'}\r\n                                inputProps= {{ min: 0}} \r\n                                value={age}\r\n                                onChange={handleAgeChange}\r\n                            />\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n                        </Grid>\r\n                        \r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                        <Typography>Address:</Typography>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter Street</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={street}\r\n                                onChange={handleStreetChange}\r\n                            />\r\n                        </FormControl>\r\n\r\n                       \r\n\r\n\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter City</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={city}\r\n                                onChange={handleCityChange}\r\n                            />\r\n                        </FormControl>\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n                            <InputLabel htmlFor=\"standard-adornment-fname\">Enter State</InputLabel>\r\n                            <Input\r\n                                id=\"standard-adornment-fname\"\r\n                                type={'text'}\r\n                                value={state}\r\n                                onChange={handleStateChange}\r\n                            />\r\n                        </FormControl>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                        <br></br><br></br>\r\n                        <FormControl required={true} fullWidth variant=\"standard\">\r\n                        <InputLabel id=\"demo-simple-select-standard-label\">Enter Lab Test</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={labtest}\r\n          onChange={handleLabTestChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={'positive'}>POSITIVE</MenuItem>\r\n          <MenuItem value={'negative'}>NEGATIVE</MenuItem>\r\n        </Select>\r\n                            \r\n                            \r\n                            \r\n                        </FormControl>\r\n\r\n                        \r\n                        <br></br><br></br>\r\n                        <FormControl variant=\"standard\" fullWidth>\r\n                            <InputLabel id=\"demo-multiple-checkbox-label\">Treatment for</InputLabel>\r\n                            <Select\r\n                            labelId=\"demo-multiple-checkbox-label\"\r\n                            id=\"demo-multiple-checkbox\"\r\n                            value={diseases}\r\n                            onChange={handleDiseaseChange}\r\n                            MenuProps={MenuProps}\r\n                            >\r\n                            {\r\n                                diseaseList.map(variant => (\r\n                                    <MenuItem key={variant.id} value={variant}>\r\n                                        \r\n                                        <ListItemText primary={variant.diseaseName+\"(\"+variant.variant+\")\"} />\r\n                                    </MenuItem>\r\n                                ))\r\n                            }\r\n                            </Select>\r\n                        </FormControl>\r\n                        </Grid>\r\n                        <br></br><br></br>\r\n                        \r\n\r\n                        \r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions align='center'>\r\n                        <Button variant=\"contained\" style={{ backgroundColor: \"green\" }} onClick={addPatient}>&nbsp;Add</Button>\r\n\r\n                        {/* <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dont have an account? <Button color=\"primary\" onClick={clickSignUp}>Sign up</Button></Typography> */}\r\n                    </DialogActions>\r\n                \r\n            <Snackbar\r\n                style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n                autoHideDuration={3000}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                open={openSnack}\r\n                onClose={handleSnackClose}\r\n                message={snackMessage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}",{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":19,"column":17,"nodeType":"165","messageId":"166","endLine":19,"endColumn":25},{"ruleId":"163","severity":1,"message":"167","line":20,"column":10,"nodeType":"165","messageId":"166","endLine":20,"endColumn":20},{"ruleId":"163","severity":1,"message":"168","line":30,"column":10,"nodeType":"165","messageId":"166","endLine":30,"endColumn":22},{"ruleId":"163","severity":1,"message":"169","line":30,"column":24,"nodeType":"165","messageId":"166","endLine":30,"endColumn":39},{"ruleId":"163","severity":1,"message":"170","line":31,"column":9,"nodeType":"165","messageId":"166","endLine":31,"endColumn":25},{"ruleId":"163","severity":1,"message":"171","line":72,"column":9,"nodeType":"165","messageId":"166","endLine":72,"endColumn":24},{"ruleId":"172","severity":1,"message":"173","line":187,"column":10,"nodeType":"174","endLine":187,"endColumn":71},{"ruleId":"172","severity":1,"message":"173","line":188,"column":5,"nodeType":"174","endLine":188,"endColumn":67},{"ruleId":"163","severity":1,"message":"164","line":25,"column":17,"nodeType":"165","messageId":"166","endLine":25,"endColumn":25},{"ruleId":"163","severity":1,"message":"167","line":26,"column":10,"nodeType":"165","messageId":"166","endLine":26,"endColumn":20},{"ruleId":"163","severity":1,"message":"175","line":1,"column":8,"nodeType":"165","messageId":"166","endLine":1,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":30,"column":17,"nodeType":"165","messageId":"166","endLine":30,"endColumn":25},{"ruleId":"163","severity":1,"message":"167","line":31,"column":10,"nodeType":"165","messageId":"166","endLine":31,"endColumn":20},{"ruleId":"163","severity":1,"message":"176","line":54,"column":10,"nodeType":"165","messageId":"166","endLine":54,"endColumn":21},{"ruleId":"163","severity":1,"message":"177","line":66,"column":9,"nodeType":"165","messageId":"166","endLine":66,"endColumn":34},{"ruleId":"163","severity":1,"message":"178","line":72,"column":9,"nodeType":"165","messageId":"166","endLine":72,"endColumn":30},{"ruleId":"163","severity":1,"message":"179","line":33,"column":10,"nodeType":"165","messageId":"166","endLine":33,"endColumn":21},{"ruleId":"163","severity":1,"message":"180","line":33,"column":23,"nodeType":"165","messageId":"166","endLine":33,"endColumn":37},{"ruleId":"163","severity":1,"message":"181","line":37,"column":7,"nodeType":"165","messageId":"166","endLine":37,"endColumn":12},{"ruleId":"163","severity":1,"message":"182","line":72,"column":12,"nodeType":"165","messageId":"166","endLine":72,"endColumn":30},{"ruleId":"163","severity":1,"message":"183","line":96,"column":9,"nodeType":"165","messageId":"166","endLine":96,"endColumn":31},{"ruleId":"163","severity":1,"message":"184","line":106,"column":9,"nodeType":"165","messageId":"166","endLine":106,"endColumn":15},{"ruleId":"163","severity":1,"message":"185","line":122,"column":9,"nodeType":"165","messageId":"166","endLine":122,"endColumn":26},{"ruleId":"163","severity":1,"message":"186","line":131,"column":9,"nodeType":"165","messageId":"166","endLine":131,"endColumn":24},{"ruleId":"172","severity":1,"message":"173","line":182,"column":13,"nodeType":"174","endLine":182,"endColumn":75},{"ruleId":"163","severity":1,"message":"187","line":9,"column":10,"nodeType":"165","messageId":"166","endLine":9,"endColumn":20},{"ruleId":"163","severity":1,"message":"188","line":80,"column":17,"nodeType":"165","messageId":"166","endLine":80,"endColumn":29},{"ruleId":"163","severity":1,"message":"189","line":84,"column":15,"nodeType":"165","messageId":"166","endLine":84,"endColumn":32},{"ruleId":"190","severity":1,"message":"191","line":99,"column":36,"nodeType":"192","messageId":"193","endLine":99,"endColumn":38},{"ruleId":"163","severity":1,"message":"194","line":1,"column":28,"nodeType":"165","messageId":"166","endLine":1,"endColumn":39},{"ruleId":"163","severity":1,"message":"195","line":1,"column":47,"nodeType":"165","messageId":"166","endLine":1,"endColumn":52},{"ruleId":"163","severity":1,"message":"196","line":1,"column":54,"nodeType":"165","messageId":"166","endLine":1,"endColumn":64},{"ruleId":"163","severity":1,"message":"175","line":5,"column":8,"nodeType":"165","messageId":"166","endLine":5,"endColumn":28},{"ruleId":"163","severity":1,"message":"197","line":11,"column":21,"nodeType":"165","messageId":"166","endLine":11,"endColumn":37},{"ruleId":"163","severity":1,"message":"187","line":21,"column":10,"nodeType":"165","messageId":"166","endLine":21,"endColumn":20},{"ruleId":"163","severity":1,"message":"198","line":27,"column":24,"nodeType":"165","messageId":"166","endLine":27,"endColumn":37},{"ruleId":"163","severity":1,"message":"199","line":29,"column":12,"nodeType":"165","messageId":"166","endLine":29,"endColumn":23},{"ruleId":"163","severity":1,"message":"200","line":29,"column":25,"nodeType":"165","messageId":"166","endLine":29,"endColumn":39},{"ruleId":"163","severity":1,"message":"201","line":30,"column":12,"nodeType":"165","messageId":"166","endLine":30,"endColumn":25},{"ruleId":"163","severity":1,"message":"202","line":30,"column":27,"nodeType":"165","messageId":"166","endLine":30,"endColumn":43},{"ruleId":"163","severity":1,"message":"203","line":32,"column":25,"nodeType":"165","messageId":"166","endLine":32,"endColumn":39},{"ruleId":"163","severity":1,"message":"204","line":34,"column":12,"nodeType":"165","messageId":"166","endLine":34,"endColumn":21},{"ruleId":"163","severity":1,"message":"205","line":34,"column":23,"nodeType":"165","messageId":"166","endLine":34,"endColumn":35},{"ruleId":"163","severity":1,"message":"206","line":35,"column":12,"nodeType":"165","messageId":"166","endLine":35,"endColumn":16},{"ruleId":"163","severity":1,"message":"207","line":35,"column":18,"nodeType":"165","messageId":"166","endLine":35,"endColumn":25},{"ruleId":"163","severity":1,"message":"208","line":36,"column":12,"nodeType":"165","messageId":"166","endLine":36,"endColumn":17},{"ruleId":"163","severity":1,"message":"209","line":36,"column":19,"nodeType":"165","messageId":"166","endLine":36,"endColumn":27},{"ruleId":"163","severity":1,"message":"210","line":37,"column":12,"nodeType":"165","messageId":"166","endLine":37,"endColumn":18},{"ruleId":"163","severity":1,"message":"211","line":37,"column":20,"nodeType":"165","messageId":"166","endLine":37,"endColumn":29},{"ruleId":"163","severity":1,"message":"212","line":38,"column":12,"nodeType":"165","messageId":"166","endLine":38,"endColumn":22},{"ruleId":"163","severity":1,"message":"213","line":38,"column":24,"nodeType":"165","messageId":"166","endLine":38,"endColumn":37},{"ruleId":"163","severity":1,"message":"214","line":39,"column":12,"nodeType":"165","messageId":"166","endLine":39,"endColumn":19},{"ruleId":"163","severity":1,"message":"215","line":39,"column":21,"nodeType":"165","messageId":"166","endLine":39,"endColumn":31},{"ruleId":"163","severity":1,"message":"169","line":41,"column":26,"nodeType":"165","messageId":"166","endLine":41,"endColumn":41},{"ruleId":"216","severity":1,"message":"217","line":146,"column":10,"nodeType":"218","endLine":146,"endColumn":12,"suggestions":"219"},{"ruleId":"163","severity":1,"message":"220","line":37,"column":9,"nodeType":"165","messageId":"166","endLine":37,"endColumn":20},{"ruleId":"163","severity":1,"message":"171","line":85,"column":9,"nodeType":"165","messageId":"166","endLine":85,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":91,"column":16,"nodeType":"223","messageId":"224","endLine":91,"endColumn":17,"suggestions":"225"},{"ruleId":"221","severity":1,"message":"222","line":91,"column":32,"nodeType":"223","messageId":"224","endLine":91,"endColumn":33,"suggestions":"226"},{"ruleId":"163","severity":1,"message":"227","line":111,"column":10,"nodeType":"165","messageId":"166","endLine":111,"endColumn":23},{"ruleId":"163","severity":1,"message":"228","line":111,"column":25,"nodeType":"165","messageId":"166","endLine":111,"endColumn":41},{"ruleId":"163","severity":1,"message":"229","line":1,"column":23,"nodeType":"165","messageId":"166","endLine":1,"endColumn":27},{"ruleId":"163","severity":1,"message":"195","line":1,"column":29,"nodeType":"165","messageId":"166","endLine":1,"endColumn":34},{"ruleId":"163","severity":1,"message":"230","line":1,"column":58,"nodeType":"165","messageId":"166","endLine":1,"endColumn":68},{"ruleId":"163","severity":1,"message":"231","line":1,"column":80,"nodeType":"165","messageId":"166","endLine":1,"endColumn":88},{"ruleId":"163","severity":1,"message":"232","line":1,"column":90,"nodeType":"165","messageId":"166","endLine":1,"endColumn":102},{"ruleId":"163","severity":1,"message":"233","line":6,"column":8,"nodeType":"165","messageId":"166","endLine":6,"endColumn":21},{"ruleId":"163","severity":1,"message":"187","line":9,"column":10,"nodeType":"165","messageId":"166","endLine":9,"endColumn":20},{"ruleId":"163","severity":1,"message":"234","line":9,"column":22,"nodeType":"165","messageId":"166","endLine":9,"endColumn":33},{"ruleId":"163","severity":1,"message":"235","line":9,"column":35,"nodeType":"165","messageId":"166","endLine":9,"endColumn":46},{"ruleId":"163","severity":1,"message":"236","line":9,"column":62,"nodeType":"165","messageId":"166","endLine":9,"endColumn":76},{"ruleId":"163","severity":1,"message":"237","line":19,"column":11,"nodeType":"165","messageId":"166","endLine":19,"endColumn":20},{"ruleId":"163","severity":1,"message":"231","line":1,"column":80,"nodeType":"165","messageId":"166","endLine":1,"endColumn":88},{"ruleId":"163","severity":1,"message":"233","line":6,"column":8,"nodeType":"165","messageId":"166","endLine":6,"endColumn":21},{"ruleId":"163","severity":1,"message":"187","line":9,"column":10,"nodeType":"165","messageId":"166","endLine":9,"endColumn":20},{"ruleId":"163","severity":1,"message":"234","line":9,"column":22,"nodeType":"165","messageId":"166","endLine":9,"endColumn":33},{"ruleId":"163","severity":1,"message":"236","line":9,"column":48,"nodeType":"165","messageId":"166","endLine":9,"endColumn":62},{"ruleId":"163","severity":1,"message":"238","line":60,"column":11,"nodeType":"165","messageId":"166","endLine":60,"endColumn":32},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'setValue' is assigned a value but never used.","Identifier","unusedVar","'isLoggedIn' is assigned a value but never used.","'snackMessage' is assigned a value but never used.","'setSnackMessage' is assigned a value but never used.","'handleSnackClose' is assigned a value but never used.","'BootstrapDialog' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AddCircleOutlineIcon' is defined but never used.","'diseaseList' is assigned a value but never used.","'handleIsGeneralBedsChange' is assigned a value but never used.","'handleIsIcuBedsChange' is assigned a value but never used.","'selectValue' is assigned a value but never used.","'setSelectValue' is assigned a value but never used.","'datas' is assigned a value but never used.","'toggleProfileModal' is defined but never used.","'BootstrapProfileDialog' is assigned a value but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'addDisease' is defined but never used.","'filterdValue' is assigned a value but never used.","'duplicatesRemoved' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'FormControl' is defined but never used.","'Input' is defined but never used.","'InputLabel' is defined but never used.","'tableCellClasses' is defined but never used.","'setHospitalId' is assigned a value but never used.","'patientName' is assigned a value but never used.","'setPatientName' is assigned a value but never used.","'patientStatus' is assigned a value but never used.","'setPatientStatus' is assigned a value but never used.","'setDiseaseList' is assigned a value but never used.","'diseaseId' is assigned a value but never used.","'setDiseaseId' is assigned a value but never used.","'city' is assigned a value but never used.","'setCity' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'street' is assigned a value but never used.","'setStreet' is assigned a value but never used.","'patientAge' is assigned a value but never used.","'setPatientAge' is assigned a value but never used.","'labTest' is assigned a value but never used.","'setLabTest' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'hospitalId'. Either include it or remove the dependency array.","ArrayExpression",["241"],"'clickSignUp' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["242","243"],["244","245"],"'logButtonName' is assigned a value but never used.","'setlogButtonName' is assigned a value but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'Checkbox' is defined but never used.","'ListItemText' is defined but never used.","'OutlinedInput' is defined but never used.","'addHospital' is defined but never used.","'addPatients' is defined but never used.","'getAllDiseases' is defined but never used.","'MenuProps' is assigned a value but never used.","'handleDiseaseIdChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"messageId":"248","fix":"249","desc":"250"},{"messageId":"251","fix":"252","desc":"253"},{"messageId":"248","fix":"254","desc":"250"},{"messageId":"251","fix":"255","desc":"253"},"Update the dependencies array to be: [hospitalId]",{"range":"256","text":"257"},"removeEscape",{"range":"258","text":"259"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"260","text":"261"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"262","text":"259"},{"range":"263","text":"261"},[5880,5882],"[hospitalId]",[2995,2996],"",[2995,2995],"\\",[3011,3012],[3011,3011]]